#! /usr/bin/env python

'''
Created on Aug 8, 2013

@author: smirarab
'''
import sys
from pasta.alignment import Alignment
import argparse


if __name__ == '__main__':
    
    parser = argparse.ArgumentParser(description='Manipulate Alignments') 
    parser.add_argument('-infile', nargs='?', type=argparse.FileType('r'), default=sys.stdin,
                         help='name of the input file (default: standard input)')
    parser.add_argument('-outfile', nargs='?', type=argparse.FileType('w'), default=sys.stdout,
                         help='name of the outfile file (default: standard output)')
    parser.add_argument('-informat', nargs='?', default="COMPACT3",
                         help='format of the input file; supported values: COMPACT3, FASTA (default: COMPACT3)')
    parser.add_argument('-outformat', nargs='?',  default="FASTA",
                         help='format of the outfile file; supported values: COMPACT3, FASTA, PHYLIP (default: FASTA)')    
    parser.add_argument('-maskmin', metavar='N', nargs='?', type=int, default=1,
                         help='sites with less than N non-gap sequences will be masked out if "mask" action is given (default: 1)') 
    parser.add_argument('-namemap', nargs="?", type=argparse.FileType('r'), default="pastajob_temp_name_translation.txt",
                         help='Name of the mapping file generated by PASTA for renaming sequences (default: pastajob_temp_name_translation.txt)')      
    parser.add_argument('actions', nargs='*', 
                         help='a list of actions (separated by space). Supported actions are: mask (see maskmin), rename (see namemap)')
    args = parser.parse_args()
    alg = Alignment()
    alg.read_file_object(args.infile,args.informat)
    
    if args.actions:
        print >>sys.stderr, "will perform the following actions: %s" %",".join(args.actions)
    else:
        print >>sys.stderr, "No actions will be taken. Input in %s will be written to output in %s." %(args.informat,args.outformat)
    
    for action in args.actions:
        if action == "mask":
            alg.mask_gapy_sites(args.maskmin)
        elif action =="rename":
            lines=filter(lambda x: x!="\n", args.namemap.readlines())
            namemap=dict(zip((x.strip() for i,x in enumerate(lines) if i%2 == 0),
                             (x.strip() for i,x in enumerate(lines) if i%2 == 1)))
            newalg = Alignment()
            for k,v in alg.iteritems():
                newalg[namemap[k]] = v
            alg = newalg
            
    alg.write(args.outfile, args.outformat)
    
